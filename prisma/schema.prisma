datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post Post[]

  BlogUser BlogUser[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

//models acima são exclusivamente de autenticação

model Blog {
  id        String     @id @default(cuid())
  title     String     @db.VarChar(60)
  subtitle  String?    @db.VarChar(191)
  slug      String     @db.VarChar(60)
  bgColor   String     @default("#FFFFFF") @db.VarChar(45)
  textColor String     @default("#000000") @db.VarChar(45)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  users     BlogUser[]
  posts     Post[]

  @@unique([slug])
  @@map("blogs")
}

model BlogUser {
  id        String   @id @default(cuid())
  role      Role     @default(AUTHOR)
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_users")
}

model Post {
  id        String    @id @default(cuid())
  title     String    @db.VarChar(100)
  subtitle  String?   @db.VarChar(100)
  slug      String    @db.VarChar(60)
  body      String    @db.Text
  blog      Blog      @relation(fields: [blogId], references: [id])
  blogId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([slug])
  @@map("blog_posts")
}

enum Role {
  OWNER
  AUTHOR
  ADMIN
  EDITOR
}
